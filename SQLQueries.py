import tkinter
from tkinter import ttk
import functionsForSQLQueries
from tkinter.scrolledtext import ScrolledText

# Insert functions
def addReader(cur, conn):
    secondWindow = tkinter.Tk()
    secondWindow.title("Add a reader")
    secondWindow.geometry("190x110")
    surnameLabel = ttk.Label(secondWindow, text="Surname: ")
    surnameLabel.grid(column=0, row=0)
    surnameEntry = tkinter.Entry(secondWindow, width=15)
    surnameEntry.grid(column=1, row=0)
    phoneLabel = ttk.Label(secondWindow, text="Phone number: ")
    phoneLabel.grid(column=0, row=1)
    phoneEntry = tkinter.Entry(secondWindow, width=15)
    phoneEntry.grid(column=1, row=1)
    libraryCardLabel = ttk.Label(secondWindow, text="Library card: ")
    libraryCardLabel.grid(column=0, row=2)
    libraryCardEntry = tkinter.Entry(secondWindow, width=15)
    libraryCardEntry.grid(column=1, row=2)
    hallLabel = ttk.Label(secondWindow, text="Hall: ")
    hallLabel.grid(column=0, row=3)
    hallEntry = tkinter.Entry(secondWindow, width=15)
    hallEntry.grid(column=1, row=3)
    btn = ttk.Button(secondWindow, text="Add", command=lambda: functionsForSQLQueries.addReader(surnameEntry.get(), phoneEntry.get(), libraryCardEntry.get(), hallEntry.get(), secondWindow, cur, conn))
    btn.grid(column=0, row=4)
    secondWindow.mainloop()

def addHall(cur, conn):
    secondWindow = tkinter.Tk()
    secondWindow.title("Add a hall")
    secondWindow.geometry("180x70")
    nameLabel = ttk.Label(secondWindow, text="Name: ")
    nameLabel.grid(column=0, row=0)
    nameEntry = tkinter.Entry(secondWindow, width=15)
    nameEntry.grid(column=1, row=0)
    capacityLabel = ttk.Label(secondWindow, text="Capacity: ")
    capacityLabel.grid(column=0, row=1)
    capacityEntry = tkinter.Entry(secondWindow, width=15)
    capacityEntry.grid(column=1, row=1)
    btn = ttk.Button(secondWindow, text="Add", command=lambda: functionsForSQLQueries.addHall(nameEntry.get(), capacityEntry.get(), secondWindow, cur, conn))
    btn.grid(column=0, row=2)
    secondWindow.mainloop()

def addBook(cur, conn):
    secondWindow = tkinter.Tk()
    secondWindow.title("Add a book")
    secondWindow.geometry("235x150")
    nameLabel = ttk.Label(secondWindow, text="Name: ")
    nameLabel.grid(column=0, row=0)
    nameEntry = tkinter.Entry(secondWindow, width=20)
    nameEntry.grid(column=1, row=0)
    authorLabel = ttk.Label(secondWindow, text="Author: ")
    authorLabel.grid(column=0, row=1)
    authorEntry = tkinter.Entry(secondWindow, width=20)
    authorEntry.grid(column=1, row=1)
    yearLabel = ttk.Label(secondWindow, text="Year: ")
    yearLabel.grid(column=0, row=2)
    yearEntry = tkinter.Entry(secondWindow, width=20)
    yearEntry.grid(column=1, row=2)
    cypherLabel = ttk.Label(secondWindow, text="Cypher: ")
    cypherLabel.grid(column=0, row=3)
    cypherEntry = tkinter.Entry(secondWindow, width=20)
    cypherEntry.grid(column=1, row=3)
    hallLabel = ttk.Label(secondWindow, text="Hall: ")
    hallLabel.grid(column=0, row=4)
    hallEntry = tkinter.Entry(secondWindow, width=20)
    hallEntry.grid(column=1, row=4)
    cntLabel = ttk.Label(secondWindow, text="Number of books: ")
    cntLabel.grid(column=0, row=5)
    cntEntry = tkinter.Entry(secondWindow, width=20)
    cntEntry.grid(column=1, row=5)
    btn = ttk.Button(secondWindow, text="Add", command=lambda: functionsForSQLQueries.addBook(nameEntry.get(), authorEntry.get(), yearEntry.get(), cypherEntry.get(), hallEntry.get(), cntEntry.get(), secondWindow, cur, conn))
    btn.grid(column=0, row=6)
    secondWindow.mainloop()

def readerGetABook(cur, conn):
    secondWindow = tkinter.Tk()
    secondWindow.title("Reader get a book")
    secondWindow.geometry("180x70")
    libraryCardLabel = ttk.Label(secondWindow, text="Library card: ")
    libraryCardLabel.grid(column=0, row=0)
    libraryCardEntry = tkinter.Entry(secondWindow, width=15)
    libraryCardEntry.grid(column=1, row=0)
    bookLabel = ttk.Label(secondWindow, text="Cypher: ")
    bookLabel.grid(column=0, row=1)
    bookEntry = tkinter.Entry(secondWindow, width=15)
    bookEntry.grid(column=1, row=1)
    btn = ttk.Button(secondWindow, text="Add", command=lambda: functionsForSQLQueries.addRecord(libraryCardEntry.get(), bookEntry.get(), secondWindow, cur, conn))
    btn.grid(column=0, row=2)
    secondWindow.mainloop()


# Select functions
# Select in readers
def selectReadersByName(cur):
    secondWindow = tkinter.Tk()
    secondWindow.title("Readers selection")
    secondWindow.geometry("250x150")
    surnameLabel = ttk.Label(secondWindow, text="Surname: ")
    surnameLabel.grid(column=0, row=0)
    surnameEntry = tkinter.Entry(secondWindow, width=15)
    surnameEntry.grid(column=1, row=0)
    btn1 = ttk.Button(secondWindow, text="Choose surname", command=lambda: functionsForSQLQueries.fillList(cur, indexList, "SELECT * FROM readers WHERE surname = " + surnameEntry.get(), 0))
    btn1.grid(column=0, row=1)
    indexList = ttk.Combobox(secondWindow)
    indexList['state'] = 'readonly'
    indexList.grid(column=0, row=2)
    btn2 = ttk.Button(secondWindow, text="Choose ID", command=lambda: functionsForSQLQueries.showElem(cur, "SELECT * FROM readers WHERE id = " + str(indexList.get()), [0, 1, 2, 3, 4], [IDValueLabel, surnameValueLabel, phoneValueLabel, libraryCardValueLabel, hallValueLabel]))
    btn2.grid(column=0, row=3)
    IDLabel = ttk.Label(secondWindow, text="ID: ")
    IDLabel.grid(column=0, row=4)
    IDValueLabel = ttk.Label(secondWindow, text="")
    IDValueLabel.grid(column=1, row=4)
    surnameLabel = ttk.Label(secondWindow, text="Surname: ")
    surnameLabel.grid(column=0, row=5)
    surnameValueLabel = ttk.Label(secondWindow, text="")
    surnameValueLabel.grid(column=1, row=5)
    phoneLabel = ttk.Label(secondWindow, text="Phone: ")
    phoneLabel.grid(column=0, row=6)
    phoneValueLabel = ttk.Label(secondWindow, text="")
    phoneValueLabel.grid(column=1, row=6)
    libraryCardLabel = ttk.Label(secondWindow, text="Library card: ")
    libraryCardLabel.grid(column=0, row=7)
    libraryCardValueLabel = ttk.Label(secondWindow, text="")
    libraryCardValueLabel.grid(column=1, row=7)
    hallLabel = ttk.Label(secondWindow, text="Hall: ")
    hallLabel.grid(column=0, row=8)
    hallValueLabel = ttk.Label(secondWindow, text="")
    hallValueLabel.grid(column=1, row=8)
    secondWindow.mainloop()

def selectAllReaders(cur):
    secondWindow = tkinter.Tk()
    secondWindow.title("Readers selection")
    secondWindow.geometry("250x150")
    indexList = ttk.Combobox(secondWindow)
    indexList.grid(column=0, row=0)
    functionsForSQLQueries.fillList(cur, indexList, "SELECT * FROM readers", 3)
    indexList['state'] = 'readonly'
    btn = ttk.Button(secondWindow, text="Choose name", command=lambda: functionsForSQLQueries.showElem(cur, "SELECT * FROM (readers INNER JOIN readers_halls ON readers.library_card = readers_halls.library_card) WHERE readers.library_card = '" + str(indexList.get()) + "'", [0, 1, 2, 3, 6], [IDValueLabel, surnameValueLabel, phoneValueLabel, libraryCardValueLabel, hallValueLabel]))
    btn.grid(column=0, row=1)
    IDLabel = ttk.Label(secondWindow, text="ID: ")
    IDLabel.grid(column=0, row=2)
    IDValueLabel = ttk.Label(secondWindow, text="")
    IDValueLabel.grid(column=1, row=2)
    surnameLabel = ttk.Label(secondWindow, text="Surname: ")
    surnameLabel.grid(column=0, row=3)
    surnameValueLabel = ttk.Label(secondWindow, text="")
    surnameValueLabel.grid(column=1, row=3)
    phoneLabel = ttk.Label(secondWindow, text="Phone: ")
    phoneLabel.grid(column=0, row=4)
    phoneValueLabel = ttk.Label(secondWindow, text="")
    phoneValueLabel.grid(column=1, row=4)
    libraryCardLabel = ttk.Label(secondWindow, text="Library card: ")
    libraryCardLabel.grid(column=0, row=5)
    libraryCardValueLabel = ttk.Label(secondWindow, text="")
    libraryCardValueLabel.grid(column=1, row=5)
    hallLabel = ttk.Label(secondWindow, text="Hall: ")
    hallLabel.grid(column=0, row=6)
    hallValueLabel = ttk.Label(secondWindow, text="")
    hallValueLabel.grid(column=1, row=6)
    secondWindow.mainloop()

# Select in halls
def selectAllHalls(cur):
    secondWindow = tkinter.Tk()
    secondWindow.title("Halls selection")
    secondWindow.geometry("200x110")
    indexList = ttk.Combobox(secondWindow)
    indexList.grid(column=0, row=0)
    functionsForSQLQueries.fillList(cur, indexList, "SELECT * FROM halls", 1)
    indexList['state'] = 'readonly'
    btn = ttk.Button(secondWindow, text="Choose name", command=lambda: functionsForSQLQueries.showElem(cur, "SELECT * FROM halls WHERE name = '" + str(indexList.get()) + "'", [0, 1, 2], [IDValueLabel, nameValueLabel, capacityValueLabel]))
    btn.grid(column=0, row=1)
    IDLabel = ttk.Label(secondWindow, text="ID: ")
    IDLabel.grid(column=0, row=2)
    IDValueLabel = ttk.Label(secondWindow, text="")
    IDValueLabel.grid(column=1, row=2)
    nameLabel = ttk.Label(secondWindow, text="Name: ")
    nameLabel.grid(column=0, row=3)
    nameValueLabel = ttk.Label(secondWindow, text="")
    nameValueLabel.grid(column=1, row=3)
    capacityLabel = ttk.Label(secondWindow, text="Capacity: ")
    capacityLabel.grid(column=0, row=4)
    capacityValueLabel = ttk.Label(secondWindow, text="")
    capacityValueLabel.grid(column=1, row=4)
    secondWindow.mainloop()

# Select in books_halls
def selectAllBooksInHalls(cur):
    secondWindow = tkinter.Tk()
    secondWindow.title("Books in halls selection")
    secondWindow.geometry("200x130")
    indexList = ttk.Combobox(secondWindow)
    indexList.grid(column=0, row=0)
    functionsForSQLQueries.fillList(cur, indexList, "SELECT * FROM books_halls", 1)
    indexList['state'] = 'readonly'
    btn = ttk.Button(secondWindow, text="Choose cypher", command=lambda: functionsForSQLQueries.showElem(cur, "SELECT * FROM books_halls WHERE id = " + str(indexList.current() + 1), [0, 1, 2], [IDValueLabel, nameValueLabel, hallValueLabel, cntValueLabel]))
    btn.grid(column=0, row=1)
    IDLabel = ttk.Label(secondWindow, text="ID: ")
    IDLabel.grid(column=0, row=2)
    IDValueLabel = ttk.Label(secondWindow, text="")
    IDValueLabel.grid(column=1, row=2)
    nameLabel = ttk.Label(secondWindow, text="Cypher: ")
    nameLabel.grid(column=0, row=3)
    nameValueLabel = ttk.Label(secondWindow, text="")
    nameValueLabel.grid(column=1, row=3)
    hallLabel = ttk.Label(secondWindow, text="Hall: ")
    hallLabel.grid(column=0, row=4)
    hallValueLabel = ttk.Label(secondWindow, text="")
    hallValueLabel.grid(column=1, row=4)
    cntLabel = ttk.Label(secondWindow, text="Cnt: ")
    cntLabel.grid(column=0, row=4)
    cntValueLabel = ttk.Label(secondWindow, text="")
    cntValueLabel.grid(column=1, row=4)
    secondWindow.mainloop()

# Select in books
def selectAllBooks(cur):
    secondWindow = tkinter.Tk()
    secondWindow.title("Books selection")
    secondWindow.geometry("250x150")
    indexList = ttk.Combobox(secondWindow)
    indexList.grid(column=0, row=0)
    functionsForSQLQueries.fillList(cur, indexList, "SELECT * FROM books", 4)
    indexList['state'] = 'readonly'
    btn = ttk.Button(secondWindow, text="Choose cypher", command=lambda: functionsForSQLQueries.showElem(cur, "SELECT * FROM books WHERE cypher = '" + indexList.get() + "'", [0, 1, 2, 3, 4], [IDValueLabel, nameValueLabel, authorValueLabel, yearValueLabel, cypherValueLabel]))
    btn.grid(column=0, row=1)
    IDLabel = ttk.Label(secondWindow, text="ID: ")
    IDLabel.grid(column=0, row=2)
    IDValueLabel = ttk.Label(secondWindow, text="")
    IDValueLabel.grid(column=1, row=2)
    nameLabel = ttk.Label(secondWindow, text="Name: ")
    nameLabel.grid(column=0, row=3)
    nameValueLabel = ttk.Label(secondWindow, text="")
    nameValueLabel.grid(column=1, row=3)
    authorLabel = ttk.Label(secondWindow, text="Author: ")
    authorLabel.grid(column=0, row=4)
    authorValueLabel = ttk.Label(secondWindow, text="")
    authorValueLabel.grid(column=1, row=4)
    yearLabel = ttk.Label(secondWindow, text="Year: ")
    yearLabel.grid(column=0, row=5)
    yearValueLabel = ttk.Label(secondWindow, text="")
    yearValueLabel.grid(column=1, row=5)
    cypherLabel = ttk.Label(secondWindow, text="Cypher: ")
    cypherLabel.grid(column=0, row=6)
    cypherValueLabel = ttk.Label(secondWindow, text="")
    cypherValueLabel.grid(column=1, row=6)
    secondWindow.mainloop()

def selectBooksbyAuthor(cur):
    secondWindow = tkinter.Tk()
    secondWindow.title("Books selection")
    secondWindow.geometry("250x70")
    authorLabel = ttk.Label(secondWindow, text="Author: ")
    authorLabel.grid(column=0, row=0)
    authorEntry = tkinter.Entry(secondWindow, width=15)
    authorEntry.grid(column=1, row=0)
    btn1 = ttk.Button(secondWindow, text="Choose author", command=lambda: functionsForSQLQueries.fillList(cur, bookList, "SELECT * FROM books WHERE author = '" + authorEntry.get() + "'", 1))
    btn1.grid(column=0, row=1)
    bookList = ttk.Combobox(secondWindow)
    bookList['state'] = 'readonly'
    bookList.grid(column=0, row=2)
    secondWindow.mainloop()

def selectBooksbyName(cur):
    secondWindow = tkinter.Tk()
    secondWindow.title("Book selection")
    secondWindow.geometry("190x70")
    welcomeLabel = ttk.Label(secondWindow, text="Name: ")
    welcomeLabel.grid(column=0, row=0)
    nameEntry = tkinter.Entry(secondWindow, width=10)
    nameEntry.grid(column=1, row=0)
    btn1 = ttk.Button(secondWindow, text="Show cypher", command=lambda: functionsForSQLQueries.showElem(cur, "SELECT * FROM books WHERE name = '" + nameEntry.get() + "'", [4],  [cypherMeanLabel]))
    btn1.grid(column=0, row=1)
    cypherLabel = ttk.Label(secondWindow, text="Cypher: ")
    cypherLabel.grid(column=0, row=3)
    cypherMeanLabel = ttk.Label(secondWindow, text="")
    cypherMeanLabel.grid(column=1, row=3)
    secondWindow.mainloop()

def selectIfBookbyName(cur):
    secondWindow = tkinter.Tk()
    secondWindow.title("Book selection")
    secondWindow.geometry("270x75")
    welcomeLabel = ttk.Label(secondWindow, text="Name: ")
    welcomeLabel.grid(column=0, row=0)
    nameEntry = tkinter.Entry(secondWindow, width=10)
    nameEntry.grid(column=1, row=0)
    btn1 = ttk.Button(secondWindow, text="Check", command=lambda: functionsForSQLQueries.checkBook(cur, "SELECT * FROM books WHERE name = '" + nameEntry.get() + "'", resLabel))
    btn1.grid(column=0, row=1)
    resLabel = ttk.Label(secondWindow, text="")
    resLabel.grid(column=1, row=3)
    secondWindow.mainloop()

# Select in books_readers
def selectAllBooksReaders(cur):
    secondWindow = tkinter.Tk()
    secondWindow.title("Borrowed books selection")
    secondWindow.geometry("200x130")
    indexList = ttk.Combobox(secondWindow)
    indexList.grid(column=0, row=0)
    functionsForSQLQueries.fillList(cur, indexList, "SELECT * FROM books_readers", 1)
    indexList['state'] = 'readonly'
    btn = ttk.Button(secondWindow, text="Choose name", command=lambda: functionsForSQLQueries.showElem(cur, "SELECT * FROM books_readers WHERE id = " + str(indexList.current() + 1), [0, 1, 2, 3], [IDValueLabel, readerValueLabel, bookValueLabel, dateValueLabel]))
    btn.grid(column=0, row=1)
    IDLabel = ttk.Label(secondWindow, text="ID: ")
    IDLabel.grid(column=0, row=2)
    IDValueLabel = ttk.Label(secondWindow, text="")
    IDValueLabel.grid(column=1, row=2)
    readerLabel = ttk.Label(secondWindow, text="Reader: ")
    readerLabel.grid(column=0, row=3)
    readerValueLabel = ttk.Label(secondWindow, text="")
    readerValueLabel.grid(column=1, row=3)
    bookLabel = ttk.Label(secondWindow, text="Book: ")
    bookLabel.grid(column=0, row=4)
    bookValueLabel = ttk.Label(secondWindow, text="")
    bookValueLabel.grid(column=1, row=4)
    dateLabel = ttk.Label(secondWindow, text="Date: ")
    dateLabel.grid(column=0, row=5)
    dateValueLabel = ttk.Label(secondWindow, text="")
    dateValueLabel.grid(column=1, row=5)
    secondWindow.mainloop()

def selectBooksReadersOutByReader(cur, option = 3):
    secondWindow = tkinter.Tk()
    secondWindow.title("Borrowed books")
    secondWindow.geometry("250x130")
    surnameLabel = ttk.Label(secondWindow, text="Library card: ")
    surnameLabel.grid(column=0, row=0)
    surnameEntry = tkinter.Entry(secondWindow, width=15)
    surnameEntry.grid(column=1, row=0)
    btn1 = ttk.Button(secondWindow, text="Choose library card", command=lambda: functionsForSQLQueries.fillList(cur, bookList, "SELECT * FROM books_readers WHERE library_card = '" + surnameEntry.get() + "'", 2))
    btn1.grid(column=0, row=1)
    bookList = ttk.Combobox(secondWindow)
    bookList['state'] = 'readonly'
    bookList.grid(column=0, row=2)
    if (option == 2):
        btn2 = ttk.Button(secondWindow, text="Choose book", command=lambda: functionsForSQLQueries.showElem(cur, "SELECT * FROM books_readers WHERE library_card = '" + str(surnameEntry.get()) + "' and cypher = '" + str(bookList.get()) + "'", [3], [dateValueLabel]))
        btn2.grid(column=0, row=3)
        dateLabel = ttk.Label(secondWindow, text="Date: ")
        dateLabel.grid(column=0, row=4)
        dateValueLabel = ttk.Label(secondWindow, text="")
        dateValueLabel.grid(column=1, row=4)
    elif (option == 3):
        btn2 = ttk.Button(secondWindow, text="Choose book", command=lambda: functionsForSQLQueries.showElem(cur, "SELECT * FROM books_readers WHERE library_card = '" + str(surnameEntry.get()) + "' and cypher = '" + str(bookList.get()) + "'", [2, 3], [bookValueLabel, dateValueLabel]))
        btn2.grid(column=0, row=3)
        bookLabel = ttk.Label(secondWindow, text="Book: ")
        bookLabel.grid(column=0, row=4)
        bookValueLabel = ttk.Label(secondWindow, text="")
        bookValueLabel.grid(column=1, row=4)
        dateLabel = ttk.Label(secondWindow, text="Date: ")
        dateLabel.grid(column=0, row=5)
        dateValueLabel = ttk.Label(secondWindow, text="")
        dateValueLabel.grid(column=1, row=5)
    secondWindow.mainloop()


# Update functions
def updateReaders(cur, conn):
    secondWindow = tkinter.Tk()
    secondWindow.title("Readers updation")
    secondWindow.geometry("280x205")
    surnameLabel = ttk.Label(secondWindow, text="Surname: ")
    surnameLabel.grid(column=0, row=0)
    nameEntry = tkinter.Entry(secondWindow, width=15)
    nameEntry.grid(column=1, row=0)
    btn1 = ttk.Button(secondWindow, text="Choose surname", command=lambda: functionsForSQLQueries.fillList(cur, indexList, "SELECT * FROM readers WHERE surname = '" + nameEntry.get() + "'", 3))
    btn1.grid(column=0, row=1)
    indexList = ttk.Combobox(secondWindow)
    indexList['state'] = 'readonly'
    indexList.grid(column=0, row=2)
    btn2 = ttk.Button(secondWindow, text="Choose library card", command=lambda: functionsForSQLQueries.fillEntries(cur, "SELECT * FROM (readers INNER JOIN readers_halls ON readers.library_card = readers_halls.library_card) WHERE readers.library_card = '" + indexList.get() + "'", [1, 2, 3, 6], [surnameEntry, phoneEntry, libraryCardEntry, hallEntry]))
    btn2.grid(column=0, row=3)
    surnameLabel = ttk.Label(secondWindow, text="Surname: ")
    surnameLabel.grid(column=0, row=4)
    surnameEntry = ttk.Entry(secondWindow, text="")
    surnameEntry.grid(column=1, row=4)
    phoneLabel = ttk.Label(secondWindow, text="Phone: ")
    phoneLabel.grid(column=0, row=5)
    phoneEntry = ttk.Entry(secondWindow, text="")
    phoneEntry.grid(column=1, row=5)
    libraryCardLabel = ttk.Label(secondWindow, text="Library card: ")
    libraryCardLabel.grid(column=0, row=6)
    libraryCardEntry = ttk.Entry(secondWindow, text="")
    libraryCardEntry.grid(column=1, row=6)
    hallLabel = ttk.Label(secondWindow, text="Hall: ")
    hallLabel.grid(column=0, row=7)
    hallEntry = ttk.Entry(secondWindow, text="")
    hallEntry.grid(column=1, row=7)
    btn3 = ttk.Button(secondWindow, text="Update", command=lambda: functionsForSQLQueries.updateReader(surnameEntry.get(), phoneEntry.get(), libraryCardEntry.get(), hallEntry.get(), indexList.get(), secondWindow, cur, conn))
    btn3.grid(column=0, row=8)
    secondWindow.mainloop()

def updateBook(cur, conn):
    secondWindow = tkinter.Tk()
    secondWindow.title("Books updation")
    secondWindow.geometry("280x205")
    bookLabel = ttk.Label(secondWindow, text="Book: ")
    bookLabel.grid(column=0, row=0)
    bookEntry = tkinter.Entry(secondWindow, width=15)
    bookEntry.grid(column=1, row=0)
    btn1 = ttk.Button(secondWindow, text="Choose book", command=lambda: functionsForSQLQueries.fillList(cur, indexList, "SELECT * FROM books WHERE name = '" + bookEntry.get() + "'", 4))
    btn1.grid(column=0, row=1)
    indexList = ttk.Combobox(secondWindow)
    indexList['state'] = 'readonly'
    indexList.grid(column=0, row=2)
    btn2 = ttk.Button(secondWindow, text="Choose cypher", command=lambda: functionsForSQLQueries.fillEntries(cur, "SELECT * FROM books WHERE cypher = '" + indexList.get() + "'", [1, 2, 3, 4], [nameEntry, authorEntry, yearEntry, cypherEntry]))
    btn2.grid(column=0, row=3)
    nameLabel = ttk.Label(secondWindow, text="Name: ")
    nameLabel.grid(column=0, row=4)
    nameEntry = ttk.Entry(secondWindow, text="")
    nameEntry.grid(column=1, row=4)
    authorLabel = ttk.Label(secondWindow, text="Author: ")
    authorLabel.grid(column=0, row=5)
    authorEntry = ttk.Entry(secondWindow, text="")
    authorEntry.grid(column=1, row=5)
    yearLabel = ttk.Label(secondWindow, text="Year: ")
    yearLabel.grid(column=0, row=6)
    yearEntry = ttk.Entry(secondWindow, text="")
    yearEntry.grid(column=1, row=6)
    cypherLabel = ttk.Label(secondWindow, text="Cypher: ")
    cypherLabel.grid(column=0, row=7)
    cypherEntry = ttk.Entry(secondWindow, text="")
    cypherEntry.grid(column=1, row=7)
    btn3 = ttk.Button(secondWindow, text="Update", command=lambda: functionsForSQLQueries.updateBook(nameEntry.get(), authorEntry.get(), yearEntry.get(), cypherEntry.get(), indexList.get(), secondWindow, cur, conn))
    btn3.grid(column=0, row=8)
    secondWindow.mainloop()

def updateBookCypher(cur, conn):
    secondWindow = tkinter.Tk()
    secondWindow.title("Book's cypher updation")
    secondWindow.geometry("280x145")
    bookLabel = ttk.Label(secondWindow, text="Book: ")
    bookLabel.grid(column=0, row=0)
    bookEntry = tkinter.Entry(secondWindow, width=15)
    bookEntry.grid(column=1, row=0)
    btn1 = ttk.Button(secondWindow, text="Choose book", command=lambda: functionsForSQLQueries.fillList(cur, indexList, "SELECT * FROM books WHERE name = '" + bookEntry.get() + "'", 4))
    btn1.grid(column=0, row=1)
    indexList = ttk.Combobox(secondWindow)
    indexList['state'] = 'readonly'
    indexList.grid(column=0, row=2)
    btn2 = ttk.Button(secondWindow, text="Choose cypher", command=lambda: functionsForSQLQueries.fillEntries(cur, "SELECT * FROM books WHERE cypher = '" + indexList.get() + "'", [4], [cypherEntry]))
    btn2.grid(column=0, row=3)
    cypherLabel = ttk.Label(secondWindow, text="Cypher: ")
    cypherLabel.grid(column=0, row=4)
    cypherEntry = ttk.Entry(secondWindow, text="")
    cypherEntry.grid(column=1, row=4)
    btn3 = ttk.Button(secondWindow, text="Update", command=lambda: functionsForSQLQueries.updateBookCypher(cypherEntry.get(), indexList.get(), secondWindow, cur, conn))
    btn3.grid(column=0, row=5)
    secondWindow.mainloop()

def updateHall(cur, conn):
    secondWindow = tkinter.Tk()
    secondWindow.title("Hall updation")
    secondWindow.geometry("230x130")
    hallLabel = ttk.Label(secondWindow, text="Hall: ")
    hallLabel.grid(column=0, row=0)
    hallEntry = tkinter.Entry(secondWindow, width=15)
    hallEntry.grid(column=1, row=0)
    btn2 = ttk.Button(secondWindow, text="Choose hall", command=lambda: functionsForSQLQueries.fillEntries(cur, "SELECT * FROM halls WHERE name = '" + hallEntry.get() + "'", [1, 2], [nameEntry, capacityEntry]))
    btn2.grid(column=0, row=3)
    nameLabel = ttk.Label(secondWindow, text="Name: ")
    nameLabel.grid(column=0, row=4)
    nameEntry = ttk.Entry(secondWindow, text="")
    nameEntry.grid(column=1, row=4)
    capacityLabel = ttk.Label(secondWindow, text="Capacity: ")
    capacityLabel.grid(column=0, row=5)
    capacityEntry = ttk.Entry(secondWindow, text="")
    capacityEntry.grid(column=1, row=5)
    btn3 = ttk.Button(secondWindow, text="Update", command=lambda: functionsForSQLQueries.updateHall(nameEntry.get(), capacityEntry.get(), hallEntry.get(), secondWindow, cur, conn))
    btn3.grid(column=0, row=6)
    secondWindow.mainloop()


# Drop functions
def deleteReader(cur, conn):
    secondWindow = tkinter.Tk()
    secondWindow.title("Readers deletion")
    secondWindow.geometry("260x100")
    surnameLabel = ttk.Label(secondWindow, text="Surname: ")
    surnameLabel.grid(column=0, row=0)
    nameEntry = tkinter.Entry(secondWindow, width=15)
    nameEntry.grid(column=1, row=0)
    btn1 = ttk.Button(secondWindow, text="Choose surname", command=lambda: functionsForSQLQueries.fillList(cur, indexList, "SELECT * FROM readers WHERE surname = '" + nameEntry.get() + "'", 3))
    btn1.grid(column=0, row=1)
    indexList = ttk.Combobox(secondWindow)
    indexList['state'] = 'readonly'
    indexList.grid(column=0, row=2)
    btn2 = ttk.Button(secondWindow, text="Delete", command=lambda: functionsForSQLQueries.queryToAnObject(["DELETE FROM readers WHERE library_card = '" + indexList.get() + "'", "DELETE FROM books_readers WHERE library_card = '" + indexList.get() + "'", "DELETE FROM books_halls WHERE library_card = '" + indexList.get() + "'"], "Reader was removed", secondWindow, cur, conn))
    btn2.grid(column=0, row=3)
    secondWindow.mainloop()

def deleteHall(cur, conn):
    secondWindow = tkinter.Tk()
    secondWindow.title("Hall deletion")
    secondWindow.geometry("180x50")
    nameLabel = ttk.Label(secondWindow, text="Hall: ")
    nameLabel.grid(column=0, row=0)
    nameEntry = tkinter.Entry(secondWindow, width=15)
    nameEntry.grid(column=1, row=0)
    btn2 = ttk.Button(secondWindow, text="Delete", command=lambda: functionsForSQLQueries.queryToAnObject(["DELETE FROM halls WHERE name = '" + nameEntry.get() + "'", "DELETE FROM books_halls WHERE hall = '" + nameEntry.get() + "'"], "Hall was removed", secondWindow, cur, conn))
    btn2.grid(column=0, row=3)
    secondWindow.mainloop()

def deleteBook(cur, conn):
    secondWindow = tkinter.Tk()
    secondWindow.title("Books deletion")
    secondWindow.geometry("250x100")
    bookLabel = ttk.Label(secondWindow, text="Book: ")
    bookLabel.grid(column=0, row=0)
    bookEntry = tkinter.Entry(secondWindow, width=15)
    bookEntry.grid(column=1, row=0)
    btn1 = ttk.Button(secondWindow, text="Choose book", command=lambda: functionsForSQLQueries.fillList(cur, indexList, "SELECT * FROM books WHERE name = '" + bookEntry.get() + "'", 4))
    btn1.grid(column=0, row=1)
    indexList = ttk.Combobox(secondWindow)
    indexList['state'] = 'readonly'
    indexList.grid(column=0, row=2)
    btn2 = ttk.Button(secondWindow, text="Delete", command=lambda: functionsForSQLQueries.queryToAnObject(["DELETE FROM books WHERE cypher = '" + indexList.get() + "'"], "Book was removed", secondWindow, cur, conn))
    btn2.grid(column=0, row=3)
    secondWindow.mainloop()

def deleteRecord(cur, conn):
    secondWindow = tkinter.Tk()
    secondWindow.title("Readers deletion")
    secondWindow.geometry("260x100")
    libraryCardLabel = ttk.Label(secondWindow, text="Library card: ")
    libraryCardLabel.grid(column=0, row=0)
    libraryCardEntry = tkinter.Entry(secondWindow, width=15)
    libraryCardEntry.grid(column=1, row=0)
    btn1 = ttk.Button(secondWindow, text="Choose library card", command=lambda: functionsForSQLQueries.fillList(cur, indexList, "SELECT * FROM books_readers WHERE library_card = '" + libraryCardEntry.get() + "'", 2))
    btn1.grid(column=0, row=1)
    indexList = ttk.Combobox(secondWindow)
    indexList['state'] = 'readonly'
    indexList.grid(column=0, row=2)
    btn2 = ttk.Button(secondWindow, text="Delete", command=lambda: functionsForSQLQueries.queryToAnObject(["DELETE FROM books_readers WHERE library_card = '" + libraryCardEntry.get() + "' and cypher = '" + indexList.get() + "'"], "Record was removed", secondWindow, cur, conn))
    btn2.grid(column=0, row=3)
    secondWindow.mainloop()


#Reference
def reference(cur):
    secondWindow = tkinter.Tk()
    secondWindow.title("Reference")
    secondWindow.geometry("380x250")
    authorLabel = ttk.Label(secondWindow, text="Author: ")
    authorLabel.grid(column=0, row=0)
    authorEntry = tkinter.Entry(secondWindow, width=15)
    authorEntry.grid(column=1, row=0)
    btn1 = ttk.Button(secondWindow, text="Choose  author", command=lambda: functionsForSQLQueries.reference(cur, txt, "SELECT books.name, books_halls.hall, books_halls.cnt FROM (books INNER JOIN books_halls ON books.cypher = books_halls.cypher) WHERE books.author = '" + authorEntry.get() + "'"))
    btn1.grid(column=0, row=1)
    txt = ScrolledText(secondWindow, width=30, height=10)
    txt.grid(column=0, row=2)
    secondWindow.mainloop()


from datetime import date
#Report
def report(cur):
    secondWindow = tkinter.Tk()
    secondWindow.title("Report")
    secondWindow.geometry("280x450")
    startData = date.today().replace(day=1).strftime('%Y-%m-%d')
    welcomeLabel = ttk.Label(secondWindow, text="Report with data since " + startData)
    welcomeLabel.grid(column=0, row=0)
    cur.execute("SELECT COUNT(*) FROM readers")
    cnt1 = cur.fetchall()
    cnt1Label = ttk.Label(secondWindow, text="Total count of readers: " + str(cnt1[0][0]))
    cnt1Label.grid(column=0, row=1)
    cur.execute("SELECT COUNT(DISTINCT readers.library_card) FROM (readers INNER JOIN books_readers ON readers.library_card = books_readers.library_card) WHERE books_readers.date > '" + startData + "'")
    cnt2 = cur.fetchall()
    cnt2Label = ttk.Label(secondWindow, text="Count of readers in this month: " + str(cnt2[0][0]))
    cnt2Label.grid(column=0, row=2)
    cnt2Label = ttk.Label(secondWindow, text="Books borrowed this month: ")
    cnt2Label.grid(column=0, row=3)
    txt1 = ScrolledText(secondWindow, width=30, height=10)
    txt1.grid(column=0, row=4)
    cur.execute("SELECT books.name, COUNT(*) FROM (books INNER JOIN books_readers ON books.cypher = books_readers.cypher) WHERE books_readers.date > '" + startData + "' GROUP BY books.name")
    info = cur.fetchall()
    for row in info:
        txt1.insert(tkinter.INSERT, str(row[0]) + "(" + str(row[1]) + ")\n")
    cnt2Label = ttk.Label(secondWindow, text="Readers that didn't borrow books this month: ")
    cnt2Label.grid(column=0, row=5)
    txt2 = ScrolledText(secondWindow, width=30, height=10)
    txt2.grid(column=0, row=6)
    cur.execute("SELECT readers.surname, readers.library_card FROM (readers LEFT JOIN books_readers ON readers.library_card = books_readers.library_card) WHERE books_readers.library_card IS NULL")
    info = cur.fetchall()
    for row in info:
        txt2.insert(tkinter.INSERT, str(row[0]) + "(" + str(row[1]) + ")\n")
    txt1['state'] = 'disabled'
    txt2['state'] = 'disabled'
    secondWindow.mainloop()


#Other
def countOfUsers(cur):
    cur.execute("SELECT COUNT(*) FROM readers")
    cnt = cur.fetchall()
    secondWindow = tkinter.Tk()
    secondWindow.title("Count of readers")
    secondWindow.geometry("180x50")
    nameLabel = ttk.Label(secondWindow, text="Number of readers: ")
    nameLabel.grid(column=0, row=0)
    nameLabel = ttk.Label(secondWindow, text=cnt[0])
    nameLabel.grid(column=1, row=0)
    secondWindow.mainloop()

def libraryInformation(cur):
    secondWindow = tkinter.Tk()
    secondWindow.title("Library information")
    secondWindow.geometry("270x260")
    welcomeLabel = ttk.Label(secondWindow, text="We are happy to see you in our library!")
    welcomeLabel.grid(column=0, row=0)
    cur.execute("SELECT COUNT(*) FROM halls")
    cnt1 = cur.fetchall()
    hallsLabel = ttk.Label(secondWindow, text="There are " + str(cnt1[0][0]) + " halls: ")
    hallsLabel.grid(column=0, row=1)
    txt1 = ScrolledText(secondWindow, width=30, height=5)
    txt1.grid(column=0, row=2)
    functionsForSQLQueries.fillTxt(cur, txt1, "SELECT name FROM halls")
    cur.execute("SELECT COUNT(DISTINCT name) FROM books")
    cnt2 = cur.fetchall()
    booksLabel = ttk.Label(secondWindow, text="We have " + str(cnt2[0][0]) + " books")
    booksLabel.grid(column=0, row=3)
    txt2 = ScrolledText(secondWindow, width=30, height=5)
    txt2.grid(column=0, row=4)
    functionsForSQLQueries.fillTxt(cur, txt2, "SELECT DISTINCT name FROM books")
    cur.execute("SELECT COUNT(DISTINCT library_card) FROM readers_halls")
    cnt3 = cur.fetchall()
    readersLabel = ttk.Label(secondWindow, text="In our library " + str(cnt3[0][0]) + " readers")
    readersLabel.grid(column=0, row=5)
    secondWindow.mainloop()